{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["// main.ts\nimport { restoreCache, saveCache } from '@actions/cache'\nimport {\n  addPath,\n  exportVariable,\n  getBooleanInput,\n  getIDToken,\n  getInput,\n  info,\n  warning,\n  setFailed,\n  platform,\n  setSecret,\n  summary\n} from '@actions/core'\nimport { exec } from '@actions/exec'\nimport {\n  downloadTool,\n  extractZip,\n  extractTar,\n  cacheDir\n} from '@actions/tool-cache'\nimport { join } from 'path'\nimport { clean } from 'semver'\nimport * as crypto from 'crypto'\nimport * as fs from 'fs/promises'\nimport Credential from '@alicloud/credentials'\nimport { env, cwd } from 'process'\nimport oss20190517, * as $oss20190517 from '@alicloud/oss20190517'\nimport * as $Util from '@alicloud/tea-util'\nimport * as $OpenApi from '@alicloud/openapi-client'\n\n// Types et interfaces\ninterface GithubRelease {\n  tag_name?: string\n  assets?: Array<{ name: string; browser_download_url: string }>\n  message?: string\n}\n\ninterface ActionConfig {\n  isWindows: boolean\n  cacheDirectory: string\n  extended: boolean\n  version: string\n  args: string\n  osPlatform: string\n  osArch: string\n  executable: string\n  extension: string\n  githubToken?: string\n}\n\n// Constants\nconst GITHUB_API = {\n  owner: 'gohugoio',\n  repo: 'hugo',\n  baseUrl: 'https://api.github.com',\n  get releaseApiUrl(): string {\n    return `${this.baseUrl}/repos/${this.owner}/${this.repo}/releases`\n  }\n} as const\n\nconst ARCH_MAP = new Map<string, string>([\n  ['x64', '64bit'],\n  ['arm', 'ARM'],\n  ['arm64', 'ARM64']\n])\n\n// Utilitaires\nclass ActionError extends Error {\n  constructor(message: string) {\n    super(message)\n    this.name = 'ActionError'\n  }\n}\n\nconst getEnv = (name: string): string => {\n  const value = process.env[name]\n  if (!value) {\n    throw new ActionError(\n      `Environment variable ${name} is required but not defined`\n    )\n  }\n  return value\n}\n\nconst mapArchitecture = (source: string): string => {\n  const target = ARCH_MAP.get(source)\n  if (!target) {\n    throw new ActionError(`Architecture ${source} is not supported`)\n  }\n  return target\n}\n\n// Fonction pour capitaliser la première lettre\nconst capitalizeFirstLetter = (str: string): string => {\n  if (!str) return str\n  return `${str.charAt(0).toUpperCase()}${str.slice(1)}`\n}\n\n// Configuration initiale de l'action\nconst initializeConfig = (): ActionConfig => {\n  const isWindows = platform.isWindows\n  const extended = getBooleanInput('extended')\n  const githubToken = getInput('github-token')\n  return {\n    isWindows,\n    cacheDirectory: getEnv('RUNNER_TOOL_CACHE'),\n    extended,\n    version: getInput('version') || 'latest',\n    args: getInput('args') || 'version',\n    osPlatform: platform.platform, // 'win32' | 'darwin' | 'linux' | etc.\n    osArch: mapArchitecture(platform.arch), // '64bit' | 'ARM' | 'ARM64'\n    executable: isWindows ? `${GITHUB_API.repo}.exe` : GITHUB_API.repo,\n    extension: isWindows ? '.zip' : '.tar.gz',\n    githubToken: githubToken || undefined\n  }\n}\n\n// Gestion des releases GitHub\nconst fetchRelease = async (\n  version: string,\n  config: ActionConfig\n): Promise<GithubRelease> => {\n  const headers: HeadersInit = {\n    Accept: 'application/vnd.github.v3+json'\n  }\n\n  if (config.githubToken) {\n    headers.Authorization = `token ${config.githubToken}`\n  }\n\n  const url =\n    version === 'latest'\n      ? `${GITHUB_API.releaseApiUrl}/latest`\n      : `${GITHUB_API.releaseApiUrl}/tags/${version}`\n\n  info(`Fetching release information from: ${url}`)\n  summary.addRaw(`Fetching release information from: [${url}](${url})\\n`)\n  const response = await fetch(url, { headers })\n\n  if (!response.ok) {\n    throw new ActionError(`Failed to fetch release: ${response.statusText}`)\n  }\n\n  return response.json()\n}\n\n// Gestion du cache\nconst handleCache = async (\n  config: ActionConfig,\n  key: string\n): Promise<string | undefined> => {\n  try {\n    const cachePath = join(\n      config.cacheDirectory,\n      `${GITHUB_API.repo}${config.extended ? '_extended' : ''}`\n    )\n    const cachedPath = await restoreCache([cachePath], key)\n    if (cachedPath) {\n      info(`Cache restored from key: ${key}`)\n      summary.addRaw(`Cache restored from key: **${key}**\\n`)\n      addPath(cachedPath)\n      return cachedPath\n    }\n\n    info(`No cache found for key: ${key}`)\n    summary.addRaw(`No cache found for key: **${key}**\\n`)\n    return undefined\n  } catch (error) {\n    const errorMessage =\n      error instanceof Error ? error.message : 'Unknown error'\n    warning(`Cache restoration failed: ${errorMessage}`)\n    summary.addRaw(`Cache restoration failed: ${errorMessage}\\n`)\n    return undefined\n  }\n}\n\nconst saveToCache = async (\n  config: ActionConfig,\n  semver: string,\n  key: string\n): Promise<void> => {\n  const cachePath = join(\n    config.cacheDirectory,\n    `${GITHUB_API.repo}${config.extended ? '_extended' : ''}`,\n    semver,\n    config.osArch\n  )\n\n  try {\n    await saveCache([cachePath], key)\n    info(`Cache saved successfully with key: ${key}`)\n    summary.addRaw(`Cache saved successfully with key: **${key}**\\n`)\n  } catch (error) {\n    const errorMessage =\n      error instanceof Error ? error.message : 'Unknown error'\n    warning(`Failed to save cache: ${errorMessage}`)\n    summary.addRaw(`Failed to save cache: ${errorMessage}\\n`)\n  }\n}\n\n// Fonction de vérification des checksums\nconst verifyChecksum = async (\n  downloadPath: string,\n  release: GithubRelease,\n  assetName: string,\n  config: ActionConfig\n): Promise<void> => {\n  const checksumAsset = release.assets?.find((a) => a.name === 'checksums.txt')\n  if (!checksumAsset) {\n    warning('No checksum file found in release')\n    summary.addRaw(`No checksum file found in release.\\n`)\n    return\n  }\n\n  const headers: HeadersInit = {\n    Accept: 'application/vnd.github.v3.raw'\n  }\n  if (config.githubToken) {\n    headers.Authorization = `token ${config.githubToken}`\n  }\n\n  info(`Fetching checksum file from: ${checksumAsset.browser_download_url}`)\n  summary.addRaw(\n    `Fetching checksum file from: [checksums.txt](${checksumAsset.browser_download_url})\\n`\n  )\n\n  const checksumResponse = await fetch(checksumAsset.browser_download_url, {\n    headers\n  })\n\n  if (!checksumResponse.ok) {\n    warning('Failed to download checksum file')\n    summary.addRaw(`Failed to download checksum file.\\n`)\n    return\n  }\n\n  const checksumContent = await checksumResponse.text()\n\n  // Parse le fichier de checksums\n  const checksumLines = checksumContent.split('\\n')\n  const checksumMap = new Map<string, string>()\n  checksumLines.forEach((line) => {\n    const [checksum, file] = line.trim().split(/\\s+/)\n    if (checksum && file) {\n      checksumMap.set(file, checksum)\n    }\n  })\n\n  const expectedChecksum = checksumMap.get(assetName)\n  if (!expectedChecksum) {\n    warning(`No checksum found for asset ${assetName}`)\n    summary.addRaw(`No checksum found for asset **${assetName}**.\\n`)\n    return\n  }\n\n  // Calculer le checksum du fichier téléchargé\n  const fileBuffer = await fs.readFile(downloadPath)\n  const hashSum = crypto.createHash('sha256')\n  hashSum.update(fileBuffer)\n  const actualChecksum = hashSum.digest('hex')\n\n  if (actualChecksum !== expectedChecksum.toLowerCase()) {\n    throw new ActionError(\n      `Checksum verification failed for ${assetName}. Expected: ${expectedChecksum}, Actual: ${actualChecksum}`\n    )\n  }\n\n  info(`Checksum verification passed for ${assetName}`)\n  summary.addRaw(`Checksum verification passed for **${assetName}**.\\n`)\n}\n\n// Gestion de l'installation de Hugo\nconst installHugo = async (\n  semver: string,\n  downloadUrl: string,\n  assetName: string,\n  config: ActionConfig,\n  release: GithubRelease\n): Promise<string> => {\n  info(`Downloading Hugo from: ${downloadUrl}`)\n  summary.addRaw(`Downloading Hugo from: [${downloadUrl}](${downloadUrl})\\n`)\n  const downloadPath = await downloadTool(downloadUrl)\n\n  // Vérification des checksums\n  await verifyChecksum(downloadPath, release, assetName, config)\n\n  let extractedFolder: string\n  if (config.isWindows) {\n    extractedFolder = await extractZip(downloadPath)\n    summary.addRaw(`Extracted **${assetName}** as a ZIP archive.\\n`)\n  } else {\n    extractedFolder = await extractTar(downloadPath)\n    summary.addRaw(`Extracted **${assetName}** as a TAR archive.\\n`)\n  }\n\n  const cachedPath = await cacheDir(\n    extractedFolder,\n    `${GITHUB_API.repo}${config.extended ? '_extended' : ''}`,\n    semver,\n    config.osArch\n  )\n\n  addPath(cachedPath)\n  info(`Hugo executable cached at: ${cachedPath}`)\n  summary.addRaw(`Hugo executable cached at: **${cachedPath}**\\n`)\n\n  return cachedPath\n}\n\n// Fonction principale\nexport const main = async (): Promise<void> => {\n  try {\n    const id_token = await getIDToken()\n\n    console.log('id_token:', id_token)\n\n    const tokenFile = crypto.randomUUID()\n    setSecret(tokenFile)\n    console.log('tokenFile:', tokenFile)\n\n    env.ALIBABA_CLOUD_OIDC_TOKEN_FILE = join(cwd(), tokenFile)\n    env.ALIBABA_CLOUD_ROLE_SESSION_NAME = env.GITHUB_RUN_ID\n\n    console.log(\n      'ALIBABA_CLOUD_OIDC_TOKEN_FILE:',\n      env.ALIBABA_CLOUD_OIDC_TOKEN_FILE\n    )\n\n    await fs.writeFile(env.ALIBABA_CLOUD_OIDC_TOKEN_FILE, id_token)\n\n    //const defaultConfig: Config = new Config({\n    //type: 'oidc_role_arn',\n    //roleArn: env.ALIBABA_CLOUD_ROLE_ARN,\n    //oidcProviderArn: env.ALIBABA_CLOUD_OIDC_PROVIDER_ARN,\n    //oidcTokenFilePath: env.ALIBABA_CLOUD_OIDC_TOKEN_FILE,\n    //roleSessionName: env.GITHUB_RUN_ID,\n    //});\n\n    console.log('GITHUB_RUN_ID:', env.GITHUB_RUN_ID)\n    info('GITHUB_RUN_ID:')\n    if (env.GITHUB_RUN_ID) {\n      info(env.GITHUB_RUN_ID)\n    }\n\n    //console.log('defaultConfig:', defaultConfig);\n\n    //const cred = new Credential(defaultConfig);\n\n    const cred = new Credential()\n\n    const defaultConfig = new $OpenApi.Config({\n      credential: cred\n    })\n\n    defaultConfig.endpoint = 'oss-eu-central-1.aliyuncs.com'\n\n    console.log('cred:', cred)\n\n    const stsToken = await cred.getCredential()\n\n    if (\n      stsToken.accessKeyId &&\n      stsToken.accessKeySecret &&\n      stsToken.securityToken\n    ) {\n      setSecret(stsToken.accessKeyId)\n      setSecret(stsToken.accessKeySecret)\n      setSecret(stsToken.securityToken)\n    }\n\n    console.log('stsToken:', stsToken)\n\n    // Variables standard\n    //exportVariable('ALIBABA_CLOUD_ACCESS_KEY_ID', stsToken.accessKeyId);\n    //exportVariable('ALIBABA_CLOUD_ACCESS_KEY_SECRET', stsToken.accessKeySecret);\n    //exportVariable('ALIBABA_CLOUD_SECURITY_TOKEN', stsToken.securityToken);\n\n    // Compatibilité anciens noms\n    //exportVariable('ALICLOUD_ACCESS_KEY', stsToken.accessKeyId);\n    //exportVariable('ALICLOUD_SECRET_KEY', stsToken.accessKeySecret);\n    //exportVariable('ALICLOUD_SECURITY_TOKEN', stsToken.securityToken);\n\n    const OSS = new oss20190517(defaultConfig)\n\n    console.log('OSS:', OSS)\n\n    const request = new $oss20190517.ListObjectsV2Request({\n      prefix: '',\n      delimiter: '/',\n      maxKeys: 100\n    })\n\n    const headers = { 'User-Agent': 'AlibabaCloud API Workbench' }\n\n    let res\n    try {\n      console.log('Requête:', JSON.stringify(request, null, 2))\n      res = await OSS.listObjectsV2WithOptions(\n        'normcore-dev',\n        request,\n        headers,\n        new $Util.RuntimeOptions({})\n      )\n      console.log(\n        'Structure complète de la réponse:',\n        JSON.stringify(res, null, 2)\n      )\n    } catch (error) {\n      console.error(\n        'Erreur lors de la récupération des objets du bucket:',\n        error\n      )\n\n      // Affichage détaillé de l'erreur\n      if (error instanceof Error) {\n        console.error('Message:', error.message)\n        console.error('Stack:', error.stack)\n      }\n\n      // Vous pouvez également ajouter des logs pour le résumé si nécessaire\n      warning(\n        `Échec de la liste des objets dans le bucket normcore-dev: ${error instanceof Error ? error.message : 'Erreur inconnue'}`\n      )\n      summary.addRaw(\n        `⚠️ Échec de la liste des objets dans le bucket **normcore-dev**\\n`\n      )\n\n      // Optionnel: lancer à nouveau l'erreur ou la gérer d'une autre façon\n      // throw error; // Si vous voulez que l'erreur soit propagée plus haut\n    }\n\n    // Initialisation du résumé\n    summary.addHeading('Job Summary', 1)\n    summary.addSeparator()\n\n    const config = initializeConfig()\n    const release = await fetchRelease(config.version, config)\n\n    if (!release.tag_name) {\n      throw new ActionError(\n        `Invalid Hugo version ${config.version}: ${release.message || 'No tag name found'}`\n      )\n    }\n\n    const semver = clean(release.tag_name) || release.tag_name.replace(/^v/, '')\n    const cacheKey = `${config.osPlatform}-${config.osArch}-${GITHUB_API.repo}${\n      config.extended ? '_extended' : ''\n    }-${semver}`\n\n    // Tentative de restauration depuis le cache\n    const cachedPath = await handleCache(config, cacheKey)\n\n    if (!cachedPath) {\n      // Sélection du bon asset à télécharger\n      let assetName = `${GITHUB_API.repo}${\n        config.extended ? '_extended' : ''\n      }_${semver}_${config.osPlatform}-${config.osArch}${config.extension}`\n      let asset = release.assets?.find((a) => a.name === assetName)\n\n      if (!asset && config.osPlatform) {\n        // Tenter avec la première lettre de la plateforme en majuscule\n        const capitalizedPlatform = capitalizeFirstLetter(config.osPlatform)\n        assetName = `${GITHUB_API.repo}${\n          config.extended ? '_extended' : ''\n        }_${semver}_${capitalizedPlatform}-${config.osArch}${config.extension}`\n        asset = release.assets?.find((a) => a.name === assetName)\n\n        if (asset) {\n          info(\n            `Asset not found with platform '${config.osPlatform}', retrying with capitalized platform '${capitalizedPlatform}'`\n          )\n          summary.addRaw(\n            `Asset not found with platform '**${config.osPlatform}**', retrying with '**${capitalizedPlatform}**'\\n`\n          )\n        }\n      }\n\n      if (!asset) {\n        throw new ActionError(\n          `Asset ${assetName} not found in release ${release.tag_name}`\n        )\n      }\n\n      const downloadUrl = asset.browser_download_url\n      await installHugo(semver, downloadUrl, assetName, config, release)\n      await saveToCache(config, semver, cacheKey)\n    }\n\n    // Exécution de Hugo\n    const argsArray = config.args.split(' ').filter((arg) => arg.length > 0)\n    info(`Executing command: ${config.executable} ${argsArray.join(' ')}`)\n    summary.addRaw(\n      `Executing command: **${config.executable} ${argsArray.join(' ')}**\\n`\n    )\n    await exec(config.executable, argsArray)\n    info('Hugo execution completed successfully.')\n    summary.addRaw(`Hugo execution completed successfully.\\n`)\n\n    // Variables\n    info(`GITHUB_ACTOR: ${getEnv('GITHUB_ACTOR')}`)\n    info(`GITHUB_ACTOR_ID: ${getEnv('GITHUB_ACTOR_ID')}`)\n\n    // Finalisation du résumé\n    summary.addSeparator()\n    summary.write() // Écrire le résumé\n  } catch (error) {\n    // Ajout de l'erreur au résumé avant d'échouer\n    if (error instanceof Error) {\n      summary.addHeading('Error', 2)\n      summary.addRaw(`${error.message}\\n`)\n    } else {\n      summary.addHeading('Error', 2)\n      summary.addRaw('Unknown error occurred.\\n')\n    }\n    summary.write() // Écrire le résumé même en cas d'erreur\n    setFailed(\n      `Action failed: ${\n        error instanceof Error ? error.message : 'Unknown error'\n      }`\n    )\n  }\n}\n\n// Exécution\nmain()\n"],"names":[],"mappings":"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"}